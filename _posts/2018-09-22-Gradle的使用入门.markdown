---
layout: post
title:  "Android工程中gradle使用入门"
date:   2018-09-17 23:31:36 +0800
categories: jekyll update
tags: gradle
---

### gradle的使用

#### Android中Gradle的使用入门
 对于一般新建的AndroidStudio工程（这里使用的3.0+版本）,工程根目录下有build.gradle和settings.gradle的两个gradle文件，每一个Module下，会各有一个build.gradle文件。1工程跟目录下的settings.gradle文件

##### 1. 工程根目录下的settings.gradle
```
include ':app',':mymodule'
```
settings.gradle文件，表示该工程引入那些module。上面的例子中，包括了两个module,分别是app和mymodule，引用时前面加冒号，用单引号引用，多个module使用逗号隔开

##### 2. 工程根目录下的build.gradle

```

buildscript {
    ext.kotlin_version = '1.1.51'
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

```
buildscript下配置的是构建配置。上面的例子中配置了kotlin版本支持，repositories是可以使用的远程仓库，depoendencies下配置的是构建工程使用的插件攻击。例子这里包括android gradle插件和kotlin构建插件
allprojects 下配置的是对于整个工程的支持的远程仓管。
最后一段，是一个task，task是gradle中的一个特性，在task中可以对工程文件的各种操作。这里是clean操作，在命令行中输入gradle clean时，执行删除buildDir（构建过程中间产生的项）


##### 3. module下的build.gradle文件
```
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "network.jiacc.mymodule"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:0.5'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2.2'
}

```
apply后面添加该module下引入的插件，如果是工程的主module，需要引入插件com.android.application，如果是依赖module,需要引入插件
com.android.library。
android下面AndroidStudio默认自带的配置，defaultConfig,为默认配置。
+ applicationId 该字段后面的值为该应用的包名，若此处配置applicationId，打包时将覆盖AndroidManifest.xml中的packageName.
+ miniSdkVersion 支持的最小SDK版本 此处和AndroidManifest.xml中同时注册时，以此处为准。
+ targetSdkVersion 应用的目标api版本，app只会使用低于此版本的SDKAPI 此处和AndroidManifest.xml同时注册时，以此处为准。

buildType配置的是打包时，release包和debug包的相关配置信息


dependencies中添加的是此工程依赖的jar或aar。

出了此处列的部分，build.gradle还可以配置其他的信息，变更Android结构目录为AndroidStudio目录等。

除此之外，还可以自己编写gradle脚本，gradle脚本定义Task，执行修改文件等操作的自动化。

build.gradle 是gradle build 命令的入口，在命令行中执行此命令，将执行构建过程。
